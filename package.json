{
    "name": "future-c",
    "description": "Future C - experimental Languageserver",
    "author": "Marcel Sotiropoulos <marcel.sotiropoulos@soti-it.at>",
    "license": "MIT",
    "version": "1.3.0",
    "publisher": "MarcelSotiropoulos",
    "categories": [],
    "keywords": [
        "multi-root ready"
    ],
    "engines": {
        "vscode": "^1.43.0"
    },
    "activationEvents": [
        "onLanguage:futurec"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/Muraxon/FuturecLanguageServer.git"
    },
    "main": "./client/out/extension",
    "contributes": {
        "menus": {
            "editor/context": [
                {
                    "when": "editorFocus && editorLangId == futurec",
                    "command": "Check.Skript.Syntax",
                    "group": "navigation"
                },
                {
                    "when": "editorFocus && editorLangId == futurec",
                    "command": "Collect.Statistics.For.Current.Script",
                    "group": "navigation"
                }
            ],
            "editor/title": [
                {
                    "command": "Check.Skript.Syntax",
                    "group": "navigation",
                    "when": "editorFocus && editorLangId == futurec"
                },
                {
                    "when": "editorFocus && editorLangId == futurec",
                    "command": "Collect.Statistics.For.Current.Script",
                    "group": "navigation"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Future C",
            "properties": {
                "future_c.SignaturhilfeBeiParserfunktionen": {
                    "scope": "application",
                    "type": "string",
                    "enum": [
                        "Snippet",
                        "Signatur"
                    ],
                    "enumDescriptions": [
                        "Fügt Parserfunktionen als Snippet ein - alle vormarkiert - und werden mit Tab ersetzt",
                        "Wie bei anderen Programmiersprachen zeigt diese Option die Parameter als Liste an, ohne sie vorher einzufügen"
                    ],
                    "default": "Snippet",
                    "description": "Wenn auf Snippet gestellt wird, dann werden die Parserfunktionen mit einem Snippet erstellt. Wenn auf Signatur gestellt, dann wird eine Signaturhilfe gegeben sobald man den Befehl eingibt"
                },
                "future_c.CodeLens": {
                    "scope": "application",
                    "type": "boolean",
                    "default": false,
                    "description": "Wenn aktiviert wird im aktuellen Editor CodeLens aktiviert - diese zeigen ober dem SCRIPT:-Teil eine Optionen für das Hinzufügen / Entfernen des Skripts aus dem Design an"
                },
                "future_c.AutocompletionMitZusaetzlichenTextedits": {
                    "scope": "application",
                    "type": "boolean",
                    "default": false,
                    "description": "Wenn aktiviert wird im Editor auch die Variable autocompleted"
                },
                "future_c.ShowDiagnosisOfCurrentScript": {
                    "scope": "application",
                    "type": "boolean",
                    "default": false,
                    "description": "Wenn aktiviert werdem im Editor alle Warnings/Errors/Hints/Infos angezeigt"
                },
                "future_c.ShowHovering": {
                    "scope": "application",
                    "type": "boolean",
                    "default": false,
                    "description": "Wenn aktiviert werdem im Editor Hoverings angezeigt"
                },
                "future_c.Autocompletion": {
                    "scope": "application",
                    "type": "boolean",
                    "default": false,
                    "description": "Wenn aktiviert wird im Editor Autocompletion aktiviert."
                },
                "future_c.ShowSignatureOrSnippets": {
                    "scope": "application",
                    "type": "boolean",
                    "default": false,
                    "description": "Wenn aktiviert wird im Editor die Signatur oder Snippet als Parameter angezeigt."
                }
            }
        },
        "languages": [
            {
                "id": "futurec",
                "extensions": [
                    ".cpp"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "futurec",
                "scopeName": "source.ffscript",
                "path": "./syntaxes/ffscript.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "futurec",
                "path": "./snippets/snippets.json"
            }
        ],
        "keybindings": [
            {
                "name": "Neuen Skripterklärung",
                "command": "editor.action.insertSnippet",
                "when": "editorTextFocus",
                "key": "Ctrl+numpad9",
                "args": {
                    "langId": "futurec",
                    "name": "New Scriptexplanation"
                }
            },
            {
                "name": "Neuen param",
                "command": "editor.action.insertSnippet",
                "when": "editorTextFocus",
                "key": "Ctrl+numpad8",
                "args": {
                    "langId": "futurec",
                    "name": "New Param"
                }
            },
            {
                "name": "Neue Function erstellen",
                "command": "editor.action.insertSnippet",
                "when": "editorTextFocus",
                "key": "Ctrl+numpad0",
                "args": {
                    "langId": "futurec",
                    "name": "New Function"
                }
            },
            {
                "name": "Changekommentar erstellen",
                "command": "editor.action.insertSnippet",
                "when": "editorTextFocus",
                "key": "Ctrl+numpad2",
                "args": {
                    "langId": "futurec",
                    "name": "New Changecomment"
                }
            },
            {
                "command": "jump.to.start.of.script",
                "key": "Ctrl+j s",
                "when": "editorTextFocus"
            },
            {
                "command": "create.hook",
                "key": "Ctrl+numpad3",
                "when": "editorTextFocus"
            },
            {
                "command": "create.script",
                "when": "editorTextFocus",
                "key": "Ctrl+numpad1"
            }
        ],
        "commands": [
            {
                "command": "Check.Skript.Syntax",
                "title": "Check Skript Syntax",
                "enablement": "editorFocus && editorLangId == futurec"
            },
            {
                "command": "Collect.Statistics.For.Current.Script",
                "title": "Sammelt Statistiken über Skript",
                "enablement": "editorFocus && editorLangId == futurec"
            },
            {
                "command": "jump.to.start.of.script",
                "title": "Jump to start of script",
                "enablement": "editorFocus && editorLangId == futurec"
            },
            {
                "command": "create.hook",
                "title": "Hook erstellen",
                "enablement": "editorFocus && editorLangId == futurec"
            },
            {
                "command": "create.script",
                "title": "Skript erstellen",
                "enablement": "editorFocus && editorLangId == futurec"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -b",
        "watch": "tsc -b -w",
        "postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
        "test": "sh ./scripts/e2e.sh"
    },
    "devDependencies": {
        "@types/mocha": "^8.2.2",
        "@types/node": "^12.12.0",
        "@typescript-eslint/eslint-plugin": "^4.21.0",
        "@typescript-eslint/parser": "^4.21.0",
        "eslint": "^7.23.0",
        "mocha": "^8.3.2",
        "typescript": "^4.2.3"
    },
    "icon": "logo.png",
    "dependencies": {
        "lru-cache": "^6.0.0",
        "minimatch": "^3.0.4",
        "vscode": "1.1.37",
        "vscode-languageclient": "9.0.1"
    }
}
